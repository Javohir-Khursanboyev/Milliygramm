@page "/user/settings"
@using Milliygramm.Model.DTOs.Users
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IToastService ToastService

@if (user is not null)
{
    <div class="profile-container">
        <h4>Account Settings</h4>

        <!-- Email Change Section -->
        <div class="profile-section">
            <EditForm Model="@changeEmail" OnValidSubmit="@HandleChangeEmail" class="form-border-0">
                <DataAnnotationsValidator />
                <h5 class="section-title">Email Address</h5>
                <p class="current-info">
                    Your current email address is <span class="text-primary">@user.Email</span>
                </p>

                <div class="row py-2">
                    <div class="col-md-6">
                        <label for="email">New email address</label>
                        <InputText id="email" @bind-Value="changeEmail.Email"
                                   class="bg-light form-control" placeholder="Enter new email" />
                        <ValidationMessage For="@(() => changeEmail.Email)" />
                    </div>
                </div>

                <div class="py-3 pb-4">
                    <button class="btn btn-primary mr-3" type="submit">Update Email</button>
                </div>
            </EditForm>
        </div>

        <!-- Password Change Section -->
        <div class="profile-section">
            <EditForm Model="@passwordModel" OnValidSubmit="@HandleChangePassword" class="form-border-0">
                <DataAnnotationsValidator />
                <h5 class="section-title">Change Password</h5>
                <p class="current-info">
                    We'll email you a confirmation when changing your password.
                </p>

                <div class="row py-2">
                    <div class="col-md-6">
                        <label for="currentpassword">Current password</label>
                        <InputText id="currentpassword" type="password"
                                   @bind-Value="passwordModel.CurrentPassword"
                                   class="bg-light form-control" placeholder="Current password" />
                        <ValidationMessage For="@(() => passwordModel.CurrentPassword)" />
                    </div>
                </div>

                <div class="row py-2">
                    <div class="col-md-6">
                        <label for="newpassword">New password</label>
                        <InputText id="newpassword" type="password"
                                   @bind-Value="passwordModel.NewPassword"
                                   class="bg-light form-control" placeholder="New password" />
                        <ValidationMessage For="@(() => passwordModel.NewPassword)" />
                    </div>
                    <div class="col-md-6 pt-md-0 pt-3">
                        <label for="confirmpassword">Confirm password</label>
                        <InputText id="confirmpassword" type="password"
                                   @bind-Value="passwordModel.ConfirmPassword"
                                   class="bg-light form-control" placeholder="Confirm password" />
                        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
                    </div>
                </div>

                <div class="py-3 pb-4">
                    <button class="btn btn-primary mr-3" type="submit">Change Password</button>
                    <a href="/forgot-password" class="btn btn-link">Forgot password?</a>
                </div>
            </EditForm>
        </div>

        <!-- Account Deletion Section -->
        <div class="profile-section danger-section">
            <h5 class="section-title text-danger">Delete Account</h5>
            <p class="current-info text-danger">
                Warning: This action cannot be undone. All your data will be permanently deleted.
            </p>

            <button @onclick="ShowDeleteConfirmation" class="btn btn-danger">
                Delete My Account
            </button>
        </div>

        <!-- Delete Confirmation Modal -->
        <div class="modal @(showDeleteModal ? "show d-block" : "d-none")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Account Deletion</h5>
                        <button type="button" class="btn-close" @onclick="CloseDeleteModal"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to permanently delete your account? This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="HandleDeleteAccount">Delete Account</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private ChangePasswordModel passwordModel = new();
    private string? serviceError;
    private bool showDeleteModal;

    private async Task HandleChangePassword()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/users/change-password", passwordModel);

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Password changed successfully");
                passwordModel = new ChangePasswordModel();
            }
            else
            {
                serviceError = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            serviceError = "An error occurred while changing password";
            Console.WriteLine(ex.Message);
        }
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteModal = true;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
    }

    private async Task HandleDeleteAccount()
    {
        try
        {
            var response = await Http.PostAsync("api/users/delete-account", null);

            if (response.IsSuccessStatusCode)
            {
                ToastService.ShowSuccess("Account deleted successfully");
                Navigation.NavigateTo("/logout");
            }
            else
            {
                serviceError = await response.Content.ReadAsStringAsync();
                showDeleteModal = false;
            }
        }
        catch (Exception ex)
        {
            serviceError = "An error occurred while deleting account";
            Console.WriteLine(ex.Message);
            showDeleteModal = false;
        }
    }

    public class ChangePasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;

        public string NewPassword { get; set; } = string.Empty;

        public string ConfirmPassword { get; set; } = string.Empty;
    }
}